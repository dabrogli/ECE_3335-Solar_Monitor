def update(frame):
    global start_time, last_average_update_time
    try:
        data = pd.read_csv(csv_file)

        if data.empty:
            return

        timestamps = pd.to_datetime(data["Timestamp"])
        temperature = data["Temperature"]
        irradiance = data["Irradiance"]
        power = data["Power"]
        efficiency = data["Efficiency"]
        voltage = data["Voltage"]
        current = data["Current"]
        expected_power = data["Expected Power"]

        if start_time is None and not timestamps.empty:
            start_time = timestamps.iloc[0]

        current_time = datetime.now()
        window_size = determine_window_size(start_time, current_time)
        window_start = current_time - window_size

        mask = (timestamps >= window_start) & (timestamps <= current_time)
        timestamps_window = timestamps[mask]
        temperature_window = temperature[mask]
        irradiance_window = irradiance[mask]
        power_window = power[mask]
        efficiency_window = efficiency[mask]
        voltage_window = voltage[mask]
        current_window = current[mask]
        expected_power_window = expected_power[mask]

        if timestamps_window.empty:
            return

        for line, y_data in zip(lines, [temperature_window, irradiance_window, power_window, efficiency_window, voltage_window, current_window]):
            line.set_data(timestamps_window, y_data)

        expected_power_line.set_data(timestamps_window, expected_power_window)

        for ax, y_data in zip(axs.flatten(), [temperature_window, irradiance_window, power_window, efficiency_window, voltage_window, current_window]):
            ax.set_xlim(window_start, current_time)

            if not y_data.empty:
                y_max = y_data.max() * 1.1  # Dynamically adjust max value with 10% margin
                ax.set_ylim(0, y_max)  # Minimum fixed at 0
            else:
                ax.set_ylim(0, 1)  # Default range for empty data
            
            ax.relim()
            ax.autoscale_view()
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
            for label in ax.get_xticklabels():
                label.set_rotation(45)

        if (current_time - last_average_update_time).total_seconds() >= 30:
            if not efficiency.empty:
                average_efficiency = efficiency.mean()
                average_efficiency_text.set_text(f"Average Efficiency = {average_efficiency:.2f}%")
            else:
                average_efficiency_text.set_text("Average Efficiency = N/A")
            last_average_update_time = current_time

    except Exception as e:
        print(f"Error updating plot: {e}")
