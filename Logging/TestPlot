import serial
import csv
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.dates as mdates
import threading

arduino_port = '/dev/ttyUSB0'  # Adjust this as needed
baud_rate = 9600
csv_file = "data.csv"

# Initialize serial connection
ser = serial.Serial(arduino_port, baud_rate, timeout=1)

# Create CSV file with headers
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Timestamp", "Temperature", "Irradiance", "Power", "Efficiency", "Voltage", "Current", "Expected Power"])

# Prepare Matplotlib for real-time plotting
fig, axs = plt.subplots(3, 2, figsize=(14, 12))
fig.suptitle("Real-Time Solar Panel Monitoring Data", fontsize=16, fontweight='bold')

colors = ['blue', 'green', 'orange', 'red', 'purple', 'cyan']
titles = [
    "Temperature Over Time", "Irradiance Over Time",
    "Power Over Time", "Efficiency Over Time",
    "Voltage Over Time", "Current Over Time"
]
y_labels = [
    "Temperature (°C)", "Irradiance (mW/cm²)",
    "Power (W)", "Efficiency (%)",
    "Voltage (V)", "Current (A)"
]
lines = []

for ax, color, title, y_label in zip(axs.flatten(), colors, titles, y_labels):
    line, = ax.plot([], [], color=color)
    ax.set_title(title, fontsize=14, fontweight='bold', pad=20)
    ax.set_ylabel(y_label, fontsize=12)
    ax.grid(True)
    lines.append(line)

axs[2, 0].set_xlabel("Time", fontsize=12)
axs[2, 1].set_xlabel("Time", fontsize=12)

def parse_line(line):
    """Parses a single line of Arduino output and extracts data."""
    try:
        data = {}
        data["Temperature"] = float(line.split("Temperature ->")[1].split("C")[0].strip())
        data["Irradiance"] = float(line.split("Irradiance ->")[1].split("mW/cm^2")[0].strip())
        data["Power"] = float(line.split("Panel Power ->")[1].split("W")[0].strip())
        data["Voltage"] = float(line.split("Panel Voltage ->")[1].split("V")[0].strip())
        data["Current"] = float(line.split("Panel Current ->")[1].split("A")[0].strip())
        data["Expected Power"] = float(line.split("Irrad Power ->")[1].split("W")[0].strip())
        data["Efficiency"] = float(line.split("Efficiency ->")[1].split("%")[0].strip())
        return data
    except (IndexError, ValueError) as e:
        print(f"Error parsing line: {line} | {e}")
        return None

def read_serial_data():
    """Continuously reads and logs data from the Arduino."""
    try:
        with open(csv_file, mode='a', newline='') as file:
            writer = csv.writer(file)
            while True:
                line = ser.readline().decode('utf-8').strip()
                print(f"Received: {line}")
                if "Temperature ->" in line:
                    data = parse_line(line)
                    if data:
                        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        writer.writerow([
                            timestamp, data["Temperature"], data["Irradiance"], data["Power"],
                            data["Efficiency"], data["Voltage"], data["Current"], data["Expected Power"]
                        ])
                        file.flush()
    except KeyboardInterrupt:
        print("Exiting...")
    finally:
        ser.close()

def update(frame):
    """Updates the real-time plot."""
    try:
        data = pd.read_csv(csv_file)
        if data.empty:
            return

        timestamps = pd.to_datetime(data["Timestamp"])
        for line, column in zip(lines, ["Temperature", "Irradiance", "Power", "Efficiency", "Voltage", "Current"]):
            line.set_data(timestamps, data[column])
            ax = line.axes
            ax.set_xlim(timestamps.iloc[0], timestamps.iloc[-1])
            ax.set_ylim(0, data[column].max() * 1.1)

        for ax in axs.flatten():
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
            for label in ax.get_xticklabels():
                label.set_rotation(45)
    except Exception as e:
        print(f"Error updating plot: {e}")

ani = animation.FuncAnimation(fig, update, interval=1000)

# Start a thread to read serial data
thread = threading.Thread(target=read_serial_data, daemon=True)
thread.start()

plt.tight_layout(rect=[0.05, 0.05, 0.95, 0.95])
plt.subplots_adjust(hspace=0.5, wspace=0.3)
plt.show()
