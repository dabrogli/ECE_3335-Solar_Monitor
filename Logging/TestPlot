import serial
import csv
from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.dates as mdates

arduino_port = '/dev/ttyUSB0'
baud_rate = 9600
csv_file = "data.csv"

ser = serial.Serial(arduino_port, baud_rate, timeout=1)

with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Timestamp", "Temperature", "Irradiance", "Power", "Efficiency"])

fig, axs = plt.subplots(2, 2, figsize=(12, 8))
fig.suptitle("Real-Time Sensor Data", fontsize=14)

titles = ["Temperature (°C)", "Irradiance (mW/cm²)", "Power (W)", "Efficiency (%)"]
lines = []
for ax, title in zip(axs.flatten(), titles):
    line, = ax.plot([], [], label=title)
    ax.set_title(title)
    ax.set_xlabel("Time")
    ax.set_ylabel(title)
    ax.legend()
    ax.grid(True)
    lines.append(line)

def update(frame):
    try:
        data = pd.read_csv(csv_file)
        timestamps = pd.to_datetime(data["Timestamp"])
        y_data = [data["Temperature"], data["Irradiance"], data["Power"], data["Efficiency"]]

        for ax, line, y in zip(axs.flatten(), lines, y_data):
            line.set_data(timestamps, y)
            ax.relim()
            ax.autoscale_view()

        axs[1, 0].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M:%S"))
        axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter("%H:%M:%S"))

        for ax in axs.flatten():
            for label in ax.get_xticklabels():
                label.set_rotation(45)
    except Exception as e:
        print(f"Error updating plot: {e}")

ani = animation.FuncAnimation(fig, update, interval=1000)

try:
    with open(csv_file, mode='a', newline='') as file:
        writer = csv.writer(file)
        while True:
            line = ser.readline().decode('utf-8').strip()
            if line:
                try:
                    temp = float(line.split("Temperature ->")[1].split("C")[0].strip())
                    irr = float(line.split("Irradience ->")[1].split("mW/cm^2")[0].strip())
                    power = float(line.split("Power ->")[1].split("W")[0].strip())
                    eff = float(line.split("Efficiency ->")[1].split("%")[0].strip())
                    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    writer.writerow([timestamp, temp, irr, power, eff])
                    file.flush()
                except Exception as e:
                    print(f"Error parsing line: {line} | {e}")
except KeyboardInterrupt:
    print("Exiting...")
finally:
    ser.close()
    plt.show()
